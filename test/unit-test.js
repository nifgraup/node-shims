'use strict';

var expect = require('chai').expect,
    assert = require('assert'),
    shims = require('../');

describe('node shims', function() {
    describe('util', function() {
        it('should inherit', function() {
            var A = function() {};
            var B = function() {
                A.call(this);
            };
            shims.util.inherits(B, A);

            var b = new B();
            expect(b).to.be.instanceof(A);
            expect(b).to.be.instanceof(B);
        });

        it('should be an array', function() {
            expect(shims.util.isArray([])).to.be.true;
            expect(shims.util.isArray(1)).to.be.false;
        });

        it('should be a boolean', function() {
            expect(shims.util.isBoolean(true)).to.be.true;
            expect(shims.util.isBoolean(1)).to.be.false;
        });

        it('should be null', function() {
            expect(shims.util.isNull(null)).to.be.true;
            expect(shims.util.isNull(1)).to.be.false;
        });

        it('should be null or undefined', function() {
            expect(shims.util.isNullOrUndefined(null)).to.be.true;
            expect(shims.util.isNullOrUndefined(undefined)).to.be.true;
            expect(shims.util.isNullOrUndefined(1)).to.be.false;
        });

        it('should be a number', function() {
            expect(shims.util.isNumber(1)).to.be.true;
            expect(shims.util.isNumber('s')).to.be.false;
        });

        it('should be a string', function() {
            expect(shims.util.isString('asd')).to.be.true;
            expect(shims.util.isString(1)).to.be.false;
        });

        it('should be undefined', function() {
            expect(shims.util.isUndefined(undefined)).to.be.true;
            expect(shims.util.isUndefined(1)).to.be.false;
        });

        it('should be an object', function() {
            expect(shims.util.isObject({})).to.be.true;
            expect(shims.util.isObject(1)).to.be.false;
        });

        it('should be a function', function() {
            expect(shims.util.isFunction(function() {})).to.be.true;
            expect(shims.util.isFunction(1)).to.be.false;
        });

        it('should be a primitive', function() {
            expect(shims.util.isPrimitive(1)).to.be.true;
            expect(shims.util.isPrimitive({})).to.be.false;
        });
    });

    describe('stream', function() {
        it('should expose stream api', function() {
            expect(shims.Stream).to.be.ok;
            expect(shims.Stream.Duplex).to.be.ok;
            expect(shims.Stream.Readable).to.be.ok;
            expect(shims.Stream.Writable).to.be.ok;
            expect(shims.Stream.Transform).to.be.ok;
            expect(shims.Stream.PassThrough).to.be.ok;
        });

        // TODO: add real unit tests for stream!
    });

    describe('net', function() {
        // this api is for now available exclusively in chrome...
        it('should expose net api', function() {
            expect(shims.net).to.be.ok;
            expect(shims.net.connect).to.be.ok;
            expect(shims.net.createConnection).to.be.ok;
            expect(shims.net.Socket).to.be.ok;
        });

        // TODO: add real unit tests for net!
    });

    describe('tls', function() {
        // this api is for now available exclusively in chrome...
        it('should expose tls api', function() {
            expect(shims.tls).to.be.ok;
            expect(shims.tls.connect).to.be.ok;
            expect(shims.tls.Socket).to.be.ok;
        });

        // TODO: add real unit tests for tls!
    });

    describe('crypto', function() {
        var B = shims.Buffer.Buffer,
            expected = {};

        // expected values generated by node crypto.
        expected['sha1-hash-binary'] = new B('qvTGHdzF6KLavt4PO0gs2a6pQ00=', 'base64').toString('binary');
        expected['sha1-hash-hex'] = 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d';
        expected['sha1-hash-base64'] = 'qvTGHdzF6KLavt4PO0gs2a6pQ00=';
        expected['sha256-hash-binary'] = new B('LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=', 'base64').toString('binary');
        expected['sha256-hash-hex'] = '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824';
        expected['sha256-hash-base64'] = 'LPJNul+wow4m6DsqxbninhsWHlwfp0JecwQzYpOLmCQ=';
        expected['md5-hash-binary'] = new B('XUFAKrxLKna5cZ2REBfFkg==', 'base64').toString('binary');
        expected['md5-hash-hex'] = '5d41402abc4b2a76b9719d911017c592';
        expected['md5-hash-base64'] = 'XUFAKrxLKna5cZ2REBfFkg==';
        expected['sha1-hmac-binary'] = new B('URIFXAX5RPhXVe/FzYlw4ZTp9Fs=', 'base64').toString('binary');
        expected['sha1-hmac-hex'] = '5112055c05f944f85755efc5cd8970e194e9f45b';
        expected['sha1-hmac-base64'] = 'URIFXAX5RPhXVe/FzYlw4ZTp9Fs=';
        expected['sha256-hmac-binary'] = new B('iKqz7ejTrflNJquQ07r9SiCDBww7zOnAFO4EpEOEfAs=', 'base64').toString('binary');
        expected['sha256-hmac-hex'] = '88aab3ede8d3adf94d26ab90d3bafd4a2083070c3bcce9c014ee04a443847c0b';
        expected['sha256-hmac-base64'] = 'iKqz7ejTrflNJquQ07r9SiCDBww7zOnAFO4EpEOEfAs=';
        expected['md5-hmac-binary'] = new B('ut5jhjxh7QsxZYBuzWrO/A==', 'base64').toString('binary');
        expected['md5-hmac-hex'] = 'bade63863c61ed0b3165806ecd6acefc';
        expected['md5-hmac-base64'] = 'ut5jhjxh7QsxZYBuzWrO/A==';
        expected['md5-with-binary'] = '27549c8ff29ca52f7957f89c328dbb6d';
        expected['sha1-with-binary'] = '4fa10dda29053b237b5d9703151c852c61e6d8d7';
        expected['sha256-with-binary'] = '424ff84246aabc1560a2881b9664108dfe26784c762d930c4ff396c085f4183b';
        expected['md5-empty-string'] = 'd41d8cd98f00b204e9800998ecf8427e';
        expected['sha1-empty-string'] = 'da39a3ee5e6b4b0d3255bfef95601890afd80709';
        expected['sha256-empty-string'] = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';

        it('sha1 hash using binary', function() {
            var actual = shims.crypto.createHash('sha1').update('hello', 'utf-8').digest('binary');
            var exp = expected['sha1-hash-binary'];
            assert.equal(actual, exp);
        });

        it('sha1 hmac using binary', function() {
            var actual = shims.crypto.createHmac('sha1', 'secret').update('hello', 'utf-8').digest('binary');
            var exp = expected['sha1-hmac-binary'];
            assert.equal(actual, exp);
        });

        it('sha1 hash using hex', function() {
            var actual = shims.crypto.createHash('sha1').update('hello', 'utf-8').digest('hex');
            var exp = expected['sha1-hash-hex'];
            assert.equal(actual, exp);
        });

        it('sha1 hmac using hex', function() {
            var actual = shims.crypto.createHmac('sha1', 'secret').update('hello', 'utf-8').digest('hex');
            var exp = expected['sha1-hmac-hex'];
            assert.equal(actual, exp);
        });

        it('sha1 hash using base64', function() {
            var actual = shims.crypto.createHash('sha1').update('hello', 'utf-8').digest('base64');
            var exp = expected['sha1-hash-base64'];
            assert.equal(actual, exp);
        });

        it('sha1 hmac using base64', function() {
            var actual = shims.crypto.createHmac('sha1', 'secret').update('hello', 'utf-8').digest('base64');
            var exp = expected['sha1-hmac-base64'];
            assert.equal(actual, exp);
        });
        it('sha1 with empty string', function() {
            var actual = shims.crypto.createHash('sha1').update('', 'utf-8').digest('hex');
            var exp = expected['sha1-empty-string'];
            assert.equal(actual, exp);
        });

        it('sha1 with raw binary', function() {
            var seed = 'hello';
            for (var i = 0; i < 1000; i++) {
                seed = shims.crypto.createHash('sha1').update(seed).digest('binary');
            }
            var actual = shims.crypto.createHash('sha1').update(seed).digest('hex');
            var exp = expected['sha1-with-binary'];
            assert.equal(actual, exp);
        });

        it('sha256 hash using binary', function() {
            var actual = shims.crypto.createHash('sha256').update('hello', 'utf-8').digest('binary');
            var exp = expected['sha256-hash-binary'];
            assert.equal(actual, exp);
        });

        it('sha256 hmac using binary', function() {
            var actual = shims.crypto.createHmac('sha256', 'secret').update('hello', 'utf-8').digest('binary');
            var exp = expected['sha256-hmac-binary'];
            assert.equal(actual, exp);
        });

        it('sha256 hash using hex', function() {
            var actual = shims.crypto.createHash('sha256').update('hello', 'utf-8').digest('hex');
            var exp = expected['sha256-hash-hex'];
            assert.equal(actual, exp);
        });

        it('sha256 hmac using hex', function() {
            var actual = shims.crypto.createHmac('sha256', 'secret').update('hello', 'utf-8').digest('hex');
            var exp = expected['sha256-hmac-hex'];
            assert.equal(actual, exp);
        });

        it('sha256 hash using base64', function() {
            var actual = shims.crypto.createHash('sha256').update('hello', 'utf-8').digest('base64');
            var exp = expected['sha256-hash-base64'];
            assert.equal(actual, exp);
        });

        it('sha256 hmac using base64', function() {
            var actual = shims.crypto.createHmac('sha256', 'secret').update('hello', 'utf-8').digest('base64');
            var exp = expected['sha256-hmac-base64'];
            assert.equal(actual, exp);
        });

        it('sha256 with empty string', function() {
            var actual = shims.crypto.createHash('sha256').update('', 'utf-8').digest('hex');
            var exp = expected['sha256-empty-string'];
            assert.equal(actual, exp);
        });

        it('sha256 with raw binary', function() {
            var seed = 'hello';
            for (var i = 0; i < 1000; i++) {
                seed = shims.crypto.createHash('sha256').update(seed).digest('binary');
            }
            var actual = shims.crypto.createHash('sha256').update(seed).digest('hex');
            var exp = expected['sha256-with-binary'];
            assert.equal(actual, exp);
        });

        it('md5 hash using binary', function() {
            var actual = shims.crypto.createHash('md5').update('hello', 'utf-8').digest('binary');
            var exp = expected['md5-hash-binary'];
            assert.equal(actual, exp);
        });

        it('md5 hmac using binary', function() {
            var actual = shims.crypto.createHmac('md5', 'secret').update('hello', 'utf-8').digest('binary');
            var exp = expected['md5-hmac-binary'];
            assert.equal(actual, exp);
        });

        it('md5 hash using hex', function() {
            var actual = shims.crypto.createHash('md5').update('hello', 'utf-8').digest('hex');
            var exp = expected['md5-hash-hex'];
            assert.equal(actual, exp);
        });

        it('md5 hmac using hex', function() {
            var actual = shims.crypto.createHmac('md5', 'secret').update('hello', 'utf-8').digest('hex');
            var exp = expected['md5-hmac-hex'];
            assert.equal(actual, exp);
        });

        it('md5 hash using base64', function() {
            var actual = shims.crypto.createHash('md5').update('hello', 'utf-8').digest('base64');
            var exp = expected['md5-hash-base64'];
            assert.equal(actual, exp);
        });

        it('md5 hmac using base64', function() {
            var actual = shims.crypto.createHmac('md5', 'secret').update('hello', 'utf-8').digest('base64');
            var exp = expected['md5-hmac-base64'];
            assert.equal(actual, exp);
        });

        it('md5 with empty string', function() {
            var actual = shims.crypto.createHash('md5').update('', 'utf-8').digest('hex');
            var exp = expected['md5-empty-string'];
            assert.equal(actual, exp);
        });

        it('md5 with raw binary', function() {
            var seed = 'hello';
            for (var i = 0; i < 1000; i++) {
                seed = shims.crypto.createHash('md5').update(seed).digest('binary');
            }
            var actual = shims.crypto.createHash('md5').update(seed).digest('hex');
            var exp = expected['md5-with-binary'];
            assert.equal(actual, exp);
        });
    });

    describe('buffer', function() {
        var B = shims.Buffer.Buffer;

        it('utf8 buffer to base64', function() {
            assert.equal(new B('Ձאab', 'utf8').toString('base64'), '1YHXkGFi');
        });

        it('utf8 buffer to hex', function() {
            assert.equal(new B('Ձאab', 'utf8').toString('hex'), 'd581d7906162');
        });

        it('utf8 to utf8', function() {
            assert.equal(new B('öäüõÖÄÜÕ', 'utf8').toString('utf8'), 'öäüõÖÄÜÕ');
        });

        it('ascii buffer to base64', function() {
            assert.equal(new B('123456!@#$%^', 'ascii').toString('base64'), 'MTIzNDU2IUAjJCVe');
        });

        it('ascii buffer to hex', function() {
            assert.equal(new B('123456!@#$%^', 'ascii').toString('hex'), '31323334353621402324255e');
        });

        it('base64 buffer to utf8', function() {
            assert.equal(new B('1YHXkGFi', 'base64').toString('utf8'), 'Ձאab');
        });

        it('hex buffer to utf8', function() {
            assert.equal(new B('d581d7906162', 'hex').toString('utf8'), 'Ձאab');
        });

        it('base64 buffer to ascii', function() {
            assert.equal(new B('MTIzNDU2IUAjJCVe', 'base64').toString('ascii'), '123456!@#$%^');
        });

        it('hex buffer to ascii', function() {
            assert.equal(new B('31323334353621402324255e', 'hex').toString('ascii'), '123456!@#$%^');
        });

        // it('utf8 to ascii', function() {
        //     assert.equal(new B('öäüõÖÄÜÕ', 'utf8').toString('ascii'), 'C6C$C<C5C\u0016C\u0004C\u001cC\u0015');
        // });

        it('base64 buffer to binary', function() {
            assert.equal(new B('MTIzNDU2IUAjJCVe', 'base64').toString('binary'), '123456!@#$%^');
        });

        it('hex buffer to binary', function() {
            assert.equal(new B('31323334353621402324255e', 'hex').toString('binary'), '123456!@#$%^');
        });

        it('utf8 to binary', function() {
            assert.equal(new B('asdž', 'utf8').toString('binary'), 'asdÅ¾');
        });

        it('hex of write{Uint,Int}{8,16,32}{LE,BE}', function() {
            var hex = [
                '03', '0300', '0003', '03000000', '00000003',
                'fd', 'fdff', 'fffd', 'fdffffff', 'fffffffd'
            ];
            var reads = [3, 3, 3, 3, 3, -3, -3, -3, -3, -3];
            ['UInt', 'Int'].forEach(function(x) {
                [8, 16, 32].forEach(function(y) {
                    var endianesses = (y === 8) ? [''] : ['LE', 'BE'];
                    endianesses.forEach(function(z) {
                        var v1 = new B(y / 8);
                        var writefn = 'write' + x + y + z;
                        var val = (x === 'Int') ? -3 : 3;
                        v1[writefn](val, 0);
                        assert.equal(
                            v1.toString('hex'),
                            hex.shift()
                        );
                        var readfn = 'read' + x + y + z;
                        assert.equal(
                            v1[readfn](0),
                            reads.shift()
                        );
                    });
                });
            });
        });

        it('hex of write{Uint,Int}{8,16,32}{LE,BE} with overflow', function() {
            var hex = [
                '', '03', '00', '030000', '000000',
                '', 'fd', 'ff', 'fdffff', 'ffffff'
            ];
            var reads = [
                undefined, 3, 0, 3, 0,
                undefined, 253, -256, 16777213, -256
            ];
            ['UInt', 'Int'].forEach(function(x) {
                [8, 16, 32].forEach(function(y) {
                    var endianesses = (y === 8) ? [''] : ['LE', 'BE'];
                    endianesses.forEach(function(z) {
                        var v1 = new B(y / 8 - 1);
                        var next = new B(4);
                        next.writeUInt32BE(0, 0);
                        var writefn = 'write' + x + y + z;
                        var val = (x === 'Int') ? -3 : 3;
                        v1[writefn](val, 0, true);
                        assert.equal(
                            v1.toString('hex'),
                            hex.shift()
                        );
                        // check that nothing leaked to next buffer.
                        assert.equal(next.readUInt32BE(0), 0);
                        // check that no bytes are read from next buffer.
                        next.writeInt32BE(~0, 0);
                        var readfn = 'read' + x + y + z;
                        assert.equal(
                            v1[readfn](0, true),
                            reads.shift()
                        );
                    });
                });
            });
        });

        it('concat() a varying number of buffers', function() {
            var zero = [];
            var one = [new B('asdf')];
            var long = [];
            for (var i = 0; i < 10; i++) {
                long.push(new B('asdf'));
            }

            var flatZero = B.concat(zero);
            var flatOne = B.concat(one);
            var flatLong = B.concat(long);
            var flatLongLen = B.concat(long, 40);

            assert.equal(flatZero.length, 0);
            assert.equal(flatOne.toString(), 'asdf');
            assert.equal(flatOne, one[0]);
            assert.equal(flatLong.toString(), (new Array(10 + 1).join('asdf')));
            assert.equal(flatLongLen.toString(), (new Array(10 + 1).join('asdf')));
        });

        it('buffer from buffer', function() {
            var b1 = new B('asdf');
            var b2 = new B(b1);
            assert.equal(b1.toString('hex'), b2.toString('hex'));
        });

        it('fill', function() {
            var b = new B(10);
            b.fill(2);
            assert.equal(b.toString('hex'), '02020202020202020202');
        });

        it('copy() empty buffer with sourceEnd=0', function() {
            var source = new B([42]);
            var destination = new B([43]);
            source.copy(destination, 0, 0, 0);
            assert.equal(destination.readUInt8(0), 43);
        });

        it('base64 ignore whitespace', function() {
            var text = '\n   YW9ldQ==  ';
            var buf = new B(text, 'base64');
            assert.equal(buf.toString(), 'aoeu');
        });

        it('buffer.slice sets indexes', function() {
            assert.equal((new B('hallo')).slice(0, 5).toString(), 'hallo');
        });

        it('buffer.slice out of range', function() {
            assert.equal((new B('hallo')).slice(0, 10).toString(), 'hallo');
            assert.equal((new B('hallo')).slice(10, 2).toString(), '');
        });

        it('base64 strings without padding', function() {
            assert.equal((new B('YW9ldQ', 'base64').toString()), 'aoeu');
        });

        it('indexes from a string', function() {
            var buf = new B('abc');
            assert.equal(buf[0], 97);
            assert.equal(buf[1], 98);
            assert.equal(buf[2], 99);
        });

        it('indexes from an array', function() {
            var buf = new B([97, 98, 99]);
            assert.equal(buf[0], 97);
            assert.equal(buf[1], 98);
            assert.equal(buf[2], 99);
        });

        it('set then modify indexes from an array', function() {
            var buf = new B([97, 98, 99]);
            assert.equal(buf[2], 99);
            assert.equal(buf.toString(), 'abc');

            buf[2] += 10;
            assert.equal(buf[2], 109);
            assert.equal(buf.toString(), 'abm');
        });

        it('Buffer.isEncoding', function() {
            assert.equal(B.isEncoding('HEX'), true);
            assert.equal(B.isEncoding('hex'), true);
            assert.equal(B.isEncoding('bad'), false);
        });

    });

    describe('querystring', function() {

        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        var qs = shims.querystring;
        it('generate querystring', function() {
            /* jshint -W001 */
            /*jshint -W053 */
            var qsTestCases = [
                ['foo=918854443121279438895193', 'foo=918854443121279438895193', {
                    'foo': '918854443121279438895193'
                }],
                ['foo=bar', 'foo=bar', {
                    'foo': 'bar'
                }],
                ['foo=bar&foo=quux', 'foo=bar&foo=quux', {
                    'foo': ['bar', 'quux']
                }],
                ['foo=1&bar=2', 'foo=1&bar=2', {
                    'foo': '1',
                    'bar': '2'
                }],
                ['my+weird+field=q1%212%22%27w%245%267%2Fz8%29%3F', 'my%20weird%20field=q1!2%22\'w%245%267%2Fz8)%3F', {
                    'my weird field': 'q1!2"\'w$5&7/z8)?'
                }],
                ['foo%3Dbaz=bar', 'foo%3Dbaz=bar', {
                    'foo=baz': 'bar'
                }],
                ['foo=baz=bar', 'foo=baz%3Dbar', {
                    'foo': 'baz=bar'
                }],
                ['str=foo&arr=1&arr=2&arr=3&somenull=&undef=', 'str=foo&arr=1&arr=2&arr=3&somenull=&undef=', {
                    'str': 'foo',
                    'arr': ['1', '2', '3'],
                    'somenull': '',
                    'undef': ''
                }],
                [' foo = bar ', '%20foo%20=%20bar%20', {
                    ' foo ': ' bar '
                }],
                ['foo=%zx', 'foo=%25zx', {
                    'foo': '%zx'
                }],
                ['foo=%EF%BF%BD', 'foo=%EF%BF%BD', {
                    'foo': '\ufffd'
                }],
                // See: https://github.com/joyent/node/issues/1707
                ['hasOwnProperty=x&toString=foo&valueOf=bar&__defineGetter__=baz', 'hasOwnProperty=x&toString=foo&valueOf=bar&__defineGetter__=baz', {
                    hasOwnProperty: 'x',
                    toString: 'foo',
                    valueOf: 'bar',
                    __defineGetter__: 'baz'
                }],
                // See: https://github.com/joyent/node/issues/3058
                ['foo&bar=baz', 'foo=&bar=baz', {
                    foo: '',
                    bar: 'baz'
                }]
            ];

            // [ wonkyQS, canonicalQS, obj ]
            var qsColonTestCases = [
                ['foo:bar', 'foo:bar', {
                    'foo': 'bar'
                }],
                ['foo:bar;foo:quux', 'foo:bar;foo:quux', {
                    'foo': ['bar', 'quux']
                }],
                ['foo:1&bar:2;baz:quux', 'foo:1%26bar%3A2;baz:quux', {
                    'foo': '1&bar:2',
                    'baz': 'quux'
                }],
                ['foo%3Abaz:bar', 'foo%3Abaz:bar', {
                    'foo:baz': 'bar'
                }],
                ['foo:baz:bar', 'foo:baz%3Abar', {
                    'foo': 'baz:bar'
                }]
            ];

            // [wonkyObj, qs, canonicalObj]
            var extendedFunction = function() {};
            extendedFunction.prototype = {
                a: 'b'
            };
            var qsWeirdObjects = [
                [{
                    regexp: /./g
                }, 'regexp=', {
                    'regexp': ''
                }],
                [{
                    regexp: new RegExp('.', 'g')
                }, 'regexp=', {
                    'regexp': ''
                }],
                [{
                    fn: function() {}
                }, 'fn=', {
                    'fn': ''
                }],
                [{
                    fn: new Function('')
                }, 'fn=', {
                    'fn': ''
                }],
                [{
                    math: Math
                }, 'math=', {
                    'math': ''
                }],
                [{
                    e: extendedFunction
                }, 'e=', {
                    'e': ''
                }],
                [{
                    d: new Date()
                }, 'd=', {
                    'd': ''
                }],
                [{
                    d: Date
                }, 'd=', {
                    'd': ''
                }],
                [{
                    f: new Boolean(false),
                    t: new Boolean(true)
                }, 'f=&t=', {
                    'f': '',
                    't': ''
                }],
                [{
                    f: false,
                    t: true
                }, 'f=false&t=true', {
                    'f': 'false',
                    't': 'true'
                }],
                [{
                    n: null
                }, 'n=', {
                    'n': ''
                }],
                [{
                    nan: NaN
                }, 'nan=', {
                    'nan': ''
                }],
                [{
                    inf: Infinity
                }, 'inf=', {
                    'inf': ''
                }]
            ];

            var vm = require('vm');
            var foreignObject = vm.runInNewContext('({"foo": ["bar", "baz"]})');

            var qsNoMungeTestCases = [
                ['', {}],
                ['foo=bar&foo=baz', {
                    'foo': ['bar', 'baz']
                }],
                ['foo=bar&foo=baz', foreignObject],
                ['blah=burp', {
                    'blah': 'burp'
                }],
                ['gragh=1&gragh=3&goo=2', {
                    'gragh': ['1', '3'],
                    'goo': '2'
                }],
                ['frappucino=muffin&goat%5B%5D=scone&pond=moose', {
                    'frappucino': 'muffin',
                    'goat[]': 'scone',
                    'pond': 'moose'
                }],
                ['trololol=yes&lololo=no', {
                    'trololol': 'yes',
                    'lololo': 'no'
                }]
            ];

            assert.strictEqual('918854443121279438895193',
                qs.parse('id=918854443121279438895193').id);

            // test that the canonical qs is parsed properly.
            qsTestCases.forEach(function(testCase) {
                assert.deepEqual(testCase[2], qs.parse(testCase[0]));
            });

            // test that the colon test cases can do the same
            qsColonTestCases.forEach(function(testCase) {
                assert.deepEqual(testCase[2], qs.parse(testCase[0], ';', ':'));
            });

            // test the weird objects, that they get parsed properly
            qsWeirdObjects.forEach(function(testCase) {
                assert.deepEqual(testCase[2], qs.parse(testCase[1]));
            });

            qsNoMungeTestCases.forEach(function(testCase) {
                assert.deepEqual(testCase[0], qs.stringify(testCase[1], '&', '=', false));
            });

            // test the nested qs-in-qs case
            (function() {
                var f = qs.parse('a=b&q=x%3Dy%26y%3Dz');
                f.q = qs.parse(f.q);
                assert.deepEqual(f, {
                    a: 'b',
                    q: {
                        x: 'y',
                        y: 'z'
                    }
                });
            })();

            // nested in colon
            (function() {
                var f = qs.parse('a:b;q:x%3Ay%3By%3Az', ';', ':');
                f.q = qs.parse(f.q, ';', ':');
                assert.deepEqual(f, {
                    a: 'b',
                    q: {
                        x: 'y',
                        y: 'z'
                    }
                });
            })();

            // now test stringifying

            // basic
            qsTestCases.forEach(function(testCase) {
                assert.equal(testCase[1], qs.stringify(testCase[2]));
            });

            qsColonTestCases.forEach(function(testCase) {
                assert.equal(testCase[1], qs.stringify(testCase[2], ';', ':'));
            });

            qsWeirdObjects.forEach(function(testCase) {
                assert.equal(testCase[1], qs.stringify(testCase[0]));
            });

            // nested
            var f = qs.stringify({
                a: 'b',
                q: qs.stringify({
                    x: 'y',
                    y: 'z'
                })
            });
            assert.equal(f, 'a=b&q=x%3Dy%26y%3Dz');

            assert.doesNotThrow(function() {
                qs.parse(undefined);
            });

            // nested in colon
            f = qs.stringify({
                a: 'b',
                q: qs.stringify({
                    x: 'y',
                    y: 'z'
                }, ';', ':')
            }, ';', ':');
            assert.equal(f, 'a:b;q:x%3Ay%3By%3Az');


            assert.deepEqual({}, qs.parse());


            // Test limiting
            assert.equal(
                Object.keys(qs.parse('a=1&b=1&c=1', null, null, {
                    maxKeys: 1
                })).length,
                1);

            // Test removing limit

            function testUnlimitedKeys() {
                var query = {},
                    url;

                for (var i = 0; i < 2000; i++) {
                    query[i] = i;
                }

                url = qs.stringify(query);

                assert.equal(
                    Object.keys(qs.parse(url, null, null, {
                        maxKeys: 0
                    })).length,
                    2000);
            }
            testUnlimitedKeys();


            var b = qs.unescapeBuffer('%d3%f2Ug%1f6v%24%5e%98%cb' +
                '%0d%ac%a2%2f%9d%eb%d8%a2%e6');
            // <Buffer d3 f2 55 67 1f 36 76 24 5e 98 cb 0d ac a2 2f 9d eb d8 a2 e6>
            assert.equal(0xd3, b[0]);
            assert.equal(0xf2, b[1]);
            assert.equal(0x55, b[2]);
            assert.equal(0x67, b[3]);
            assert.equal(0x1f, b[4]);
            assert.equal(0x36, b[5]);
            assert.equal(0x76, b[6]);
            assert.equal(0x24, b[7]);
            assert.equal(0x5e, b[8]);
            assert.equal(0x98, b[9]);
            assert.equal(0xcb, b[10]);
            assert.equal(0x0d, b[11]);
            assert.equal(0xac, b[12]);
            assert.equal(0xa2, b[13]);
            assert.equal(0x2f, b[14]);
            assert.equal(0x9d, b[15]);
            assert.equal(0xeb, b[16]);
            assert.equal(0xd8, b[17]);
            assert.equal(0xa2, b[18]);
            assert.equal(0xe6, b[19]);
        });
    });

    describe('url', function() {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        var relativeTests = [
            ['/foo/bar/baz', 'quux', '/foo/bar/quux'],
            ['/foo/bar/baz', 'quux/asdf', '/foo/bar/quux/asdf'],
            ['/foo/bar/baz', 'quux/baz', '/foo/bar/quux/baz'],
            ['/foo/bar/baz', '../quux/baz', '/foo/quux/baz'],
            ['/foo/bar/baz', '/bar', '/bar'],
            ['/foo/bar/baz/', 'quux', '/foo/bar/baz/quux'],
            ['/foo/bar/baz/', 'quux/baz', '/foo/bar/baz/quux/baz'],
            ['/foo/bar/baz', '../../../../../../../../quux/baz', '/quux/baz'],
            ['/foo/bar/baz', '../../../../../../../quux/baz', '/quux/baz'],
            ['foo/bar', '../../../baz', '../../baz'],
            ['foo/bar/', '../../../baz', '../baz'],
            ['http://example.com/b//c//d;p?q#blarg', 'https:#hash2', 'https:///#hash2'],
            ['http://example.com/b//c//d;p?q#blarg',
                'https:/p/a/t/h?s#hash2',
                'https://p/a/t/h?s#hash2'
            ],
            ['http://example.com/b//c//d;p?q#blarg',
                'https://u:p@h.com/p/a/t/h?s#hash2',
                'https://u:p@h.com/p/a/t/h?s#hash2'
            ],
            ['http://example.com/b//c//d;p?q#blarg',
                'https:/a/b/c/d',
                'https://a/b/c/d'
            ],
            ['http://example.com/b//c//d;p?q#blarg',
                'http:#hash2',
                'http://example.com/b//c//d;p?q#hash2'
            ],
            ['http://example.com/b//c//d;p?q#blarg',
                'http:/p/a/t/h?s#hash2',
                'http://example.com/p/a/t/h?s#hash2'
            ],
            ['http://example.com/b//c//d;p?q#blarg',
                'http://u:p@h.com/p/a/t/h?s#hash2',
                'http://u:p@h.com/p/a/t/h?s#hash2'
            ],
            ['http://example.com/b//c//d;p?q#blarg',
                'http:/a/b/c/d',
                'http://example.com/a/b/c/d'
            ],
            ['/foo/bar/baz', '/../etc/passwd', '/etc/passwd']
        ];

        var parseTests = {
            '//some_path': {
                'href': '//some_path',
                'pathname': '//some_path',
                'path': '//some_path'
            },

            'HTTP://www.example.com/': {
                'href': 'http://www.example.com/',
                'protocol': 'http:',
                'slashes': true,
                'host': 'www.example.com',
                'hostname': 'www.example.com',
                'pathname': '/',
                'path': '/'
            },

            'HTTP://www.example.com': {
                'href': 'http://www.example.com/',
                'protocol': 'http:',
                'slashes': true,
                'host': 'www.example.com',
                'hostname': 'www.example.com',
                'pathname': '/',
                'path': '/'
            },

            'http://www.ExAmPlE.com/': {
                'href': 'http://www.example.com/',
                'protocol': 'http:',
                'slashes': true,
                'host': 'www.example.com',
                'hostname': 'www.example.com',
                'pathname': '/',
                'path': '/'
            },

            'http://user:pw@www.ExAmPlE.com/': {
                'href': 'http://user:pw@www.example.com/',
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user:pw',
                'host': 'www.example.com',
                'hostname': 'www.example.com',
                'pathname': '/',
                'path': '/'
            },

            'http://USER:PW@www.ExAmPlE.com/': {
                'href': 'http://USER:PW@www.example.com/',
                'protocol': 'http:',
                'slashes': true,
                'auth': 'USER:PW',
                'host': 'www.example.com',
                'hostname': 'www.example.com',
                'pathname': '/',
                'path': '/'
            },

            'http://user@www.example.com/': {
                'href': 'http://user@www.example.com/',
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user',
                'host': 'www.example.com',
                'hostname': 'www.example.com',
                'pathname': '/',
                'path': '/'
            },

            'http://user%3Apw@www.example.com/': {
                'href': 'http://user:pw@www.example.com/',
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user:pw',
                'host': 'www.example.com',
                'hostname': 'www.example.com',
                'pathname': '/',
                'path': '/'
            },

            'http://x.com/path?that\'s#all, folks': {
                'href': 'http://x.com/path?that%27s#all,%20folks',
                'protocol': 'http:',
                'slashes': true,
                'host': 'x.com',
                'hostname': 'x.com',
                'search': '?that%27s',
                'query': 'that%27s',
                'pathname': '/path',
                'hash': '#all,%20folks',
                'path': '/path?that%27s'
            },

            'HTTP://X.COM/Y': {
                'href': 'http://x.com/Y',
                'protocol': 'http:',
                'slashes': true,
                'host': 'x.com',
                'hostname': 'x.com',
                'pathname': '/Y',
                'path': '/Y'
            },

            // an unexpected invalid char in the hostname.
            'HtTp://x.y.cOm*a/b/c?d=e#f g<h>i': {
                'href': 'http://x.y.com/*a/b/c?d=e#f%20g%3Ch%3Ei',
                'protocol': 'http:',
                'slashes': true,
                'host': 'x.y.com',
                'hostname': 'x.y.com',
                'pathname': '/*a/b/c',
                'search': '?d=e',
                'query': 'd=e',
                'hash': '#f%20g%3Ch%3Ei',
                'path': '/*a/b/c?d=e'
            },

            // make sure that we don't accidentally lcast the path parts.
            'HtTp://x.y.cOm*A/b/c?d=e#f g<h>i': {
                'href': 'http://x.y.com/*A/b/c?d=e#f%20g%3Ch%3Ei',
                'protocol': 'http:',
                'slashes': true,
                'host': 'x.y.com',
                'hostname': 'x.y.com',
                'pathname': '/*A/b/c',
                'search': '?d=e',
                'query': 'd=e',
                'hash': '#f%20g%3Ch%3Ei',
                'path': '/*A/b/c?d=e'
            },

            'http://x...y...#p': {
                'href': 'http://x...y.../#p',
                'protocol': 'http:',
                'slashes': true,
                'host': 'x...y...',
                'hostname': 'x...y...',
                'hash': '#p',
                'pathname': '/',
                'path': '/'
            },

            'http://x/p/"quoted"': {
                'href': 'http://x/p/%22quoted%22',
                'protocol': 'http:',
                'slashes': true,
                'host': 'x',
                'hostname': 'x',
                'pathname': '/p/%22quoted%22',
                'path': '/p/%22quoted%22'
            },

            '<http://goo.corn/bread> Is a URL!': {
                'href': '%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!',
                'pathname': '%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!',
                'path': '%3Chttp://goo.corn/bread%3E%20Is%20a%20URL!'
            },

            'http://www.narwhaljs.org/blog/categories?id=news': {
                'href': 'http://www.narwhaljs.org/blog/categories?id=news',
                'protocol': 'http:',
                'slashes': true,
                'host': 'www.narwhaljs.org',
                'hostname': 'www.narwhaljs.org',
                'search': '?id=news',
                'query': 'id=news',
                'pathname': '/blog/categories',
                'path': '/blog/categories?id=news'
            },

            'http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=': {
                'href': 'http://mt0.google.com/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=',
                'protocol': 'http:',
                'slashes': true,
                'host': 'mt0.google.com',
                'hostname': 'mt0.google.com',
                'pathname': '/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s=',
                'path': '/vt/lyrs=m@114&hl=en&src=api&x=2&y=2&z=3&s='
            },

            'http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=': {
                'href': 'http://mt0.google.com/vt/lyrs=m@114???&hl=en&src=api' + '&x=2&y=2&z=3&s=',
                'protocol': 'http:',
                'slashes': true,
                'host': 'mt0.google.com',
                'hostname': 'mt0.google.com',
                'search': '???&hl=en&src=api&x=2&y=2&z=3&s=',
                'query': '??&hl=en&src=api&x=2&y=2&z=3&s=',
                'pathname': '/vt/lyrs=m@114',
                'path': '/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s='
            },

            'http://user:pass@mt0.google.com/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s=': {
                'href': 'http://user:pass@mt0.google.com/vt/lyrs=m@114???' + '&hl=en&src=api&x=2&y=2&z=3&s=',
                'protocol': 'http:',
                'slashes': true,
                'host': 'mt0.google.com',
                'auth': 'user:pass',
                'hostname': 'mt0.google.com',
                'search': '???&hl=en&src=api&x=2&y=2&z=3&s=',
                'query': '??&hl=en&src=api&x=2&y=2&z=3&s=',
                'pathname': '/vt/lyrs=m@114',
                'path': '/vt/lyrs=m@114???&hl=en&src=api&x=2&y=2&z=3&s='
            },

            'file:///etc/passwd': {
                'href': 'file:///etc/passwd',
                'slashes': true,
                'protocol': 'file:',
                'pathname': '/etc/passwd',
                'hostname': '',
                'host': '',
                'path': '/etc/passwd'
            },

            'file://localhost/etc/passwd': {
                'href': 'file://localhost/etc/passwd',
                'protocol': 'file:',
                'slashes': true,
                'pathname': '/etc/passwd',
                'hostname': 'localhost',
                'host': 'localhost',
                'path': '/etc/passwd'
            },

            'file://foo/etc/passwd': {
                'href': 'file://foo/etc/passwd',
                'protocol': 'file:',
                'slashes': true,
                'pathname': '/etc/passwd',
                'hostname': 'foo',
                'host': 'foo',
                'path': '/etc/passwd'
            },

            'file:///etc/node/': {
                'href': 'file:///etc/node/',
                'slashes': true,
                'protocol': 'file:',
                'pathname': '/etc/node/',
                'hostname': '',
                'host': '',
                'path': '/etc/node/'
            },

            'file://localhost/etc/node/': {
                'href': 'file://localhost/etc/node/',
                'protocol': 'file:',
                'slashes': true,
                'pathname': '/etc/node/',
                'hostname': 'localhost',
                'host': 'localhost',
                'path': '/etc/node/'
            },

            'file://foo/etc/node/': {
                'href': 'file://foo/etc/node/',
                'protocol': 'file:',
                'slashes': true,
                'pathname': '/etc/node/',
                'hostname': 'foo',
                'host': 'foo',
                'path': '/etc/node/'
            },

            'http:/baz/../foo/bar': {
                'href': 'http:/baz/../foo/bar',
                'protocol': 'http:',
                'pathname': '/baz/../foo/bar',
                'path': '/baz/../foo/bar'
            },

            'http://user:pass@example.com:8000/foo/bar?baz=quux#frag': {
                'href': 'http://user:pass@example.com:8000/foo/bar?baz=quux#frag',
                'protocol': 'http:',
                'slashes': true,
                'host': 'example.com:8000',
                'auth': 'user:pass',
                'port': '8000',
                'hostname': 'example.com',
                'hash': '#frag',
                'search': '?baz=quux',
                'query': 'baz=quux',
                'pathname': '/foo/bar',
                'path': '/foo/bar?baz=quux'
            },

            '//user:pass@example.com:8000/foo/bar?baz=quux#frag': {
                'href': '//user:pass@example.com:8000/foo/bar?baz=quux#frag',
                'slashes': true,
                'host': 'example.com:8000',
                'auth': 'user:pass',
                'port': '8000',
                'hostname': 'example.com',
                'hash': '#frag',
                'search': '?baz=quux',
                'query': 'baz=quux',
                'pathname': '/foo/bar',
                'path': '/foo/bar?baz=quux'
            },

            '/foo/bar?baz=quux#frag': {
                'href': '/foo/bar?baz=quux#frag',
                'hash': '#frag',
                'search': '?baz=quux',
                'query': 'baz=quux',
                'pathname': '/foo/bar',
                'path': '/foo/bar?baz=quux'
            },

            'http:/foo/bar?baz=quux#frag': {
                'href': 'http:/foo/bar?baz=quux#frag',
                'protocol': 'http:',
                'hash': '#frag',
                'search': '?baz=quux',
                'query': 'baz=quux',
                'pathname': '/foo/bar',
                'path': '/foo/bar?baz=quux'
            },

            'mailto:foo@bar.com?subject=hello': {
                'href': 'mailto:foo@bar.com?subject=hello',
                'protocol': 'mailto:',
                'host': 'bar.com',
                'auth': 'foo',
                'hostname': 'bar.com',
                'search': '?subject=hello',
                'query': 'subject=hello',
                'path': '?subject=hello'
            },

            'javascript:alert(\'hello\');': {
                'href': 'javascript:alert(\'hello\');',
                'protocol': 'javascript:',
                'pathname': 'alert(\'hello\');',
                'path': 'alert(\'hello\');'
            },

            'xmpp:isaacschlueter@jabber.org': {
                'href': 'xmpp:isaacschlueter@jabber.org',
                'protocol': 'xmpp:',
                'host': 'jabber.org',
                'auth': 'isaacschlueter',
                'hostname': 'jabber.org'
            },

            'http://atpass:foo%40bar@127.0.0.1:8080/path?search=foo#bar': {
                'href': 'http://atpass:foo%40bar@127.0.0.1:8080/path?search=foo#bar',
                'protocol': 'http:',
                'slashes': true,
                'host': '127.0.0.1:8080',
                'auth': 'atpass:foo@bar',
                'hostname': '127.0.0.1',
                'port': '8080',
                'pathname': '/path',
                'search': '?search=foo',
                'query': 'search=foo',
                'hash': '#bar',
                'path': '/path?search=foo'
            },

            'svn+ssh://foo/bar': {
                'href': 'svn+ssh://foo/bar',
                'host': 'foo',
                'hostname': 'foo',
                'protocol': 'svn+ssh:',
                'pathname': '/bar',
                'path': '/bar',
                'slashes': true
            },

            'dash-test://foo/bar': {
                'href': 'dash-test://foo/bar',
                'host': 'foo',
                'hostname': 'foo',
                'protocol': 'dash-test:',
                'pathname': '/bar',
                'path': '/bar',
                'slashes': true
            },

            'dash-test:foo/bar': {
                'href': 'dash-test:foo/bar',
                'host': 'foo',
                'hostname': 'foo',
                'protocol': 'dash-test:',
                'pathname': '/bar',
                'path': '/bar'
            },

            'dot.test://foo/bar': {
                'href': 'dot.test://foo/bar',
                'host': 'foo',
                'hostname': 'foo',
                'protocol': 'dot.test:',
                'pathname': '/bar',
                'path': '/bar',
                'slashes': true
            },

            'dot.test:foo/bar': {
                'href': 'dot.test:foo/bar',
                'host': 'foo',
                'hostname': 'foo',
                'protocol': 'dot.test:',
                'pathname': '/bar',
                'path': '/bar'
            },

            // PUNYCODE DOES NOT WORK HERE!

            // IDNA tests
            // 'http://www.日本語.com/': {
            //     'href': 'http://www.xn--wgv71a119e.com/',
            //     'protocol': 'http:',
            //     'slashes': true,
            //     'host': 'www.xn--wgv71a119e.com',
            //     'hostname': 'www.xn--wgv71a119e.com',
            //     'pathname': '/',
            //     'path': '/'
            // },

            // 'http://example.Bücher.com/': {
            //     'href': 'http://example.xn--bcher-kva.com/',
            //     'protocol': 'http:',
            //     'slashes': true,
            //     'host': 'example.xn--bcher-kva.com',
            //     'hostname': 'example.xn--bcher-kva.com',
            //     'pathname': '/',
            //     'path': '/'
            // },

            // 'http://www.Äffchen.com/': {
            //     'href': 'http://www.xn--ffchen-9ta.com/',
            //     'protocol': 'http:',
            //     'slashes': true,
            //     'host': 'www.xn--ffchen-9ta.com',
            //     'hostname': 'www.xn--ffchen-9ta.com',
            //     'pathname': '/',
            //     'path': '/'
            // },

            // 'http://www.Äffchen.cOm*A/b/c?d=e#f g<h>i': {
            //     'href': 'http://www.xn--ffchen-9ta.com/*A/b/c?d=e#f%20g%3Ch%3Ei',
            //     'protocol': 'http:',
            //     'slashes': true,
            //     'host': 'www.xn--ffchen-9ta.com',
            //     'hostname': 'www.xn--ffchen-9ta.com',
            //     'pathname': '/*A/b/c',
            //     'search': '?d=e',
            //     'query': 'd=e',
            //     'hash': '#f%20g%3Ch%3Ei',
            //     'path': '/*A/b/c?d=e'
            // },

            // 'http://SÉLIER.COM/': {
            //     'href': 'http://xn--slier-bsa.com/',
            //     'protocol': 'http:',
            //     'slashes': true,
            //     'host': 'xn--slier-bsa.com',
            //     'hostname': 'xn--slier-bsa.com',
            //     'pathname': '/',
            //     'path': '/'
            // },

            // 'http://ليهمابتكلموشعربي؟.ي؟/': {
            //     'href': 'http://xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f/',
            //     'protocol': 'http:',
            //     'slashes': true,
            //     'host': 'xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f',
            //     'hostname': 'xn--egbpdaj6bu4bxfgehfvwxn.xn--egb9f',
            //     'pathname': '/',
            //     'path': '/'
            // },

            // 'http://➡.ws/➡': {
            //     'href': 'http://xn--hgi.ws/➡',
            //     'protocol': 'http:',
            //     'slashes': true,
            //     'host': 'xn--hgi.ws',
            //     'hostname': 'xn--hgi.ws',
            //     'pathname': '/➡',
            //     'path': '/➡'
            // },

            'http://bucket_name.s3.amazonaws.com/image.jpg': {
                protocol: 'http:',
                'slashes': true,
                host: 'bucket_name.s3.amazonaws.com',
                hostname: 'bucket_name.s3.amazonaws.com',
                pathname: '/image.jpg',
                href: 'http://bucket_name.s3.amazonaws.com/image.jpg',
                'path': '/image.jpg'
            },

            'git+http://github.com/joyent/node.git': {
                protocol: 'git+http:',
                slashes: true,
                host: 'github.com',
                hostname: 'github.com',
                pathname: '/joyent/node.git',
                path: '/joyent/node.git',
                href: 'git+http://github.com/joyent/node.git'
            },

            //if local1@domain1 is uses as a relative URL it may
            //be parse into auth@hostname, but here there is no
            //way to make it work in url.parse, I add the test to be explicit
            'local1@domain1': {
                'pathname': 'local1@domain1',
                'path': 'local1@domain1',
                'href': 'local1@domain1'
            },

            //While this may seem counter-intuitive, a browser will parse
            //<a href='www.google.com'> as a path.
            'www.example.com': {
                'href': 'www.example.com',
                'pathname': 'www.example.com',
                'path': 'www.example.com'
            },

            // ipv6 support
            '[fe80::1]': {
                'href': '[fe80::1]',
                'pathname': '[fe80::1]',
                'path': '[fe80::1]'
            },

            'coap://[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]': {
                'protocol': 'coap:',
                'slashes': true,
                'host': '[fedc:ba98:7654:3210:fedc:ba98:7654:3210]',
                'hostname': 'fedc:ba98:7654:3210:fedc:ba98:7654:3210',
                'href': 'coap://[fedc:ba98:7654:3210:fedc:ba98:7654:3210]/',
                'pathname': '/',
                'path': '/'
            },

            'coap://[1080:0:0:0:8:800:200C:417A]:61616/': {
                'protocol': 'coap:',
                'slashes': true,
                'host': '[1080:0:0:0:8:800:200c:417a]:61616',
                'port': '61616',
                'hostname': '1080:0:0:0:8:800:200c:417a',
                'href': 'coap://[1080:0:0:0:8:800:200c:417a]:61616/',
                'pathname': '/',
                'path': '/'
            },

            'http://user:password@[3ffe:2a00:100:7031::1]:8080': {
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user:password',
                'host': '[3ffe:2a00:100:7031::1]:8080',
                'port': '8080',
                'hostname': '3ffe:2a00:100:7031::1',
                'href': 'http://user:password@[3ffe:2a00:100:7031::1]:8080/',
                'pathname': '/',
                'path': '/'
            },

            'coap://u:p@[::192.9.5.5]:61616/.well-known/r?n=Temperature': {
                'protocol': 'coap:',
                'slashes': true,
                'auth': 'u:p',
                'host': '[::192.9.5.5]:61616',
                'port': '61616',
                'hostname': '::192.9.5.5',
                'href': 'coap://u:p@[::192.9.5.5]:61616/.well-known/r?n=Temperature',
                'search': '?n=Temperature',
                'query': 'n=Temperature',
                'pathname': '/.well-known/r',
                'path': '/.well-known/r?n=Temperature'
            },

            // empty port
            'http://example.com:': {
                'protocol': 'http:',
                'slashes': true,
                'host': 'example.com',
                'hostname': 'example.com',
                'href': 'http://example.com/',
                'pathname': '/',
                'path': '/'
            },

            'http://example.com:/a/b.html': {
                'protocol': 'http:',
                'slashes': true,
                'host': 'example.com',
                'hostname': 'example.com',
                'href': 'http://example.com/a/b.html',
                'pathname': '/a/b.html',
                'path': '/a/b.html'
            },

            'http://example.com:?a=b': {
                'protocol': 'http:',
                'slashes': true,
                'host': 'example.com',
                'hostname': 'example.com',
                'href': 'http://example.com/?a=b',
                'search': '?a=b',
                'query': 'a=b',
                'pathname': '/',
                'path': '/?a=b'
            },

            'http://example.com:#abc': {
                'protocol': 'http:',
                'slashes': true,
                'host': 'example.com',
                'hostname': 'example.com',
                'href': 'http://example.com/#abc',
                'hash': '#abc',
                'pathname': '/',
                'path': '/'
            },

            'http://[fe80::1]:/a/b?a=b#abc': {
                'protocol': 'http:',
                'slashes': true,
                'host': '[fe80::1]',
                'hostname': 'fe80::1',
                'href': 'http://[fe80::1]/a/b?a=b#abc',
                'search': '?a=b',
                'query': 'a=b',
                'hash': '#abc',
                'pathname': '/a/b',
                'path': '/a/b?a=b'
            },

            'http://-lovemonsterz.tumblr.com/rss': {
                'protocol': 'http:',
                'slashes': true,
                'host': '-lovemonsterz.tumblr.com',
                'hostname': '-lovemonsterz.tumblr.com',
                'href': 'http://-lovemonsterz.tumblr.com/rss',
                'pathname': '/rss',
                'path': '/rss',
            },

            'http://-lovemonsterz.tumblr.com:80/rss': {
                'protocol': 'http:',
                'slashes': true,
                'port': '80',
                'host': '-lovemonsterz.tumblr.com:80',
                'hostname': '-lovemonsterz.tumblr.com',
                'href': 'http://-lovemonsterz.tumblr.com:80/rss',
                'pathname': '/rss',
                'path': '/rss',
            },

            'http://user:pass@-lovemonsterz.tumblr.com/rss': {
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user:pass',
                'host': '-lovemonsterz.tumblr.com',
                'hostname': '-lovemonsterz.tumblr.com',
                'href': 'http://user:pass@-lovemonsterz.tumblr.com/rss',
                'pathname': '/rss',
                'path': '/rss',
            },

            'http://user:pass@-lovemonsterz.tumblr.com:80/rss': {
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user:pass',
                'port': '80',
                'host': '-lovemonsterz.tumblr.com:80',
                'hostname': '-lovemonsterz.tumblr.com',
                'href': 'http://user:pass@-lovemonsterz.tumblr.com:80/rss',
                'pathname': '/rss',
                'path': '/rss',
            },

            'http://_jabber._tcp.google.com/test': {
                'protocol': 'http:',
                'slashes': true,
                'host': '_jabber._tcp.google.com',
                'hostname': '_jabber._tcp.google.com',
                'href': 'http://_jabber._tcp.google.com/test',
                'pathname': '/test',
                'path': '/test',
            },

            'http://user:pass@_jabber._tcp.google.com/test': {
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user:pass',
                'host': '_jabber._tcp.google.com',
                'hostname': '_jabber._tcp.google.com',
                'href': 'http://user:pass@_jabber._tcp.google.com/test',
                'pathname': '/test',
                'path': '/test',
            },

            'http://_jabber._tcp.google.com:80/test': {
                'protocol': 'http:',
                'slashes': true,
                'port': '80',
                'host': '_jabber._tcp.google.com:80',
                'hostname': '_jabber._tcp.google.com',
                'href': 'http://_jabber._tcp.google.com:80/test',
                'pathname': '/test',
                'path': '/test',
            },

            'http://user:pass@_jabber._tcp.google.com:80/test': {
                'protocol': 'http:',
                'slashes': true,
                'auth': 'user:pass',
                'port': '80',
                'host': '_jabber._tcp.google.com:80',
                'hostname': '_jabber._tcp.google.com',
                'href': 'http://user:pass@_jabber._tcp.google.com:80/test',
                'pathname': '/test',
                'path': '/test',
            },

            'http://x:1/\' <>"`/{}|\\^~`/': {
                protocol: 'http:',
                slashes: true,
                host: 'x:1',
                port: '1',
                hostname: 'x',
                pathname: '/%27%20%3C%3E%22%60/%7B%7D%7C%5C%5E~%60/',
                path: '/%27%20%3C%3E%22%60/%7B%7D%7C%5C%5E~%60/',
                href: 'http://x:1/%27%20%3C%3E%22%60/%7B%7D%7C%5C%5E~%60/'
            },

            'http://a@b@c/': {
                protocol: 'http:',
                slashes: true,
                auth: 'a@b',
                host: 'c',
                hostname: 'c',
                href: 'http://a%40b@c/',
                path: '/',
                pathname: '/'
            },

            'http://a@b?@c': {
                protocol: 'http:',
                slashes: true,
                auth: 'a',
                host: 'b',
                hostname: 'b',
                href: 'http://a@b/?@c',
                path: '/?@c',
                pathname: '/',
                search: '?@c',
                query: '@c'
            },

            'http://a\r" \t\n<\'b:b@c\r\nd/e?f': {
                protocol: 'http:',
                slashes: true,
                auth: 'a\r" \t\n<\'b:b',
                host: 'c',
                port: null,
                hostname: 'c',
                hash: null,
                search: '?f',
                query: 'f',
                pathname: '%0D%0Ad/e',
                path: '%0D%0Ad/e?f',
                href: 'http://a%0D%22%20%09%0A%3C\'b:b@c/%0D%0Ad/e?f'
            }

        };

        var parseTestsWithQueryString = {
            '/foo/bar?baz=quux#frag': {
                'href': '/foo/bar?baz=quux#frag',
                'hash': '#frag',
                'search': '?baz=quux',
                'query': {
                    'baz': 'quux'
                },
                'pathname': '/foo/bar',
                'path': '/foo/bar?baz=quux'
            },
            'http://example.com': {
                'href': 'http://example.com/',
                'protocol': 'http:',
                'slashes': true,
                'host': 'example.com',
                'hostname': 'example.com',
                'query': {},
                'search': '',
                'pathname': '/',
                'path': '/'
            }
        };

        var bases = [
            'http://a/b/c/d;p?q',
            'http://a/b/c/d;p?q=1/2',
            'http://a/b/c/d;p=1/2?q',
            'fred:///s//a/b/c',
            'http:///s//a/b/c'
        ];

        //[to, from, result]
        var relativeTests2 = [
            // http://lists.w3.org/Archives/Public/uri/2004Feb/0114.html
            ['../c', 'foo:a/b', 'foo:c'],
            ['foo:.', 'foo:a', 'foo:'],
            ['/foo/../../../bar', 'zz:abc', 'zz:/bar'],
            ['/foo/../bar', 'zz:abc', 'zz:/bar'],
            // @isaacs Disagree. Not how web browsers resolve this.
            ['foo/../../../bar', 'zz:abc', 'zz:bar'],
            // ['foo/../../../bar',  'zz:abc', 'zz:../../bar'], // @isaacs Added
            ['foo/../bar', 'zz:abc', 'zz:bar'],
            ['zz:.', 'zz:abc', 'zz:'],
            ['/.', bases[0], 'http://a/'],
            ['/.foo', bases[0], 'http://a/.foo'],
            ['.foo', bases[0], 'http://a/b/c/.foo'],

            // http://gbiv.com/protocols/uri/test/rel_examples1.html
            // examples from RFC 2396
            ['g:h', bases[0], 'g:h'],
            ['g', bases[0], 'http://a/b/c/g'],
            ['./g', bases[0], 'http://a/b/c/g'],
            ['g/', bases[0], 'http://a/b/c/g/'],
            ['/g', bases[0], 'http://a/g'],
            ['//g', bases[0], 'http://g/'],
            // changed with RFC 2396bis
            //('?y', bases[0], 'http://a/b/c/d;p?y'],
            ['?y', bases[0], 'http://a/b/c/d;p?y'],
            ['g?y', bases[0], 'http://a/b/c/g?y'],
            // changed with RFC 2396bis
            //('#s', bases[0], CURRENT_DOC_URI + '#s'],
            ['#s', bases[0], 'http://a/b/c/d;p?q#s'],
            ['g#s', bases[0], 'http://a/b/c/g#s'],
            ['g?y#s', bases[0], 'http://a/b/c/g?y#s'],
            [';x', bases[0], 'http://a/b/c/;x'],
            ['g;x', bases[0], 'http://a/b/c/g;x'],
            ['g;x?y#s', bases[0], 'http://a/b/c/g;x?y#s'],
            // changed with RFC 2396bis
            //('', bases[0], CURRENT_DOC_URI],
            ['', bases[0], 'http://a/b/c/d;p?q'],
            ['.', bases[0], 'http://a/b/c/'],
            ['./', bases[0], 'http://a/b/c/'],
            ['..', bases[0], 'http://a/b/'],
            ['../', bases[0], 'http://a/b/'],
            ['../g', bases[0], 'http://a/b/g'],
            ['../..', bases[0], 'http://a/'],
            ['../../', bases[0], 'http://a/'],
            ['../../g', bases[0], 'http://a/g'],
            ['../../../g', bases[0], ('http://a/../g', 'http://a/g')],
            ['../../../../g', bases[0], ('http://a/../../g', 'http://a/g')],
            // changed with RFC 2396bis
            //('/./g', bases[0], 'http://a/./g'],
            ['/./g', bases[0], 'http://a/g'],
            // changed with RFC 2396bis
            //('/../g', bases[0], 'http://a/../g'],
            ['/../g', bases[0], 'http://a/g'],
            ['g.', bases[0], 'http://a/b/c/g.'],
            ['.g', bases[0], 'http://a/b/c/.g'],
            ['g..', bases[0], 'http://a/b/c/g..'],
            ['..g', bases[0], 'http://a/b/c/..g'],
            ['./../g', bases[0], 'http://a/b/g'],
            ['./g/.', bases[0], 'http://a/b/c/g/'],
            ['g/./h', bases[0], 'http://a/b/c/g/h'],
            ['g/../h', bases[0], 'http://a/b/c/h'],
            ['g;x=1/./y', bases[0], 'http://a/b/c/g;x=1/y'],
            ['g;x=1/../y', bases[0], 'http://a/b/c/y'],
            ['g?y/./x', bases[0], 'http://a/b/c/g?y/./x'],
            ['g?y/../x', bases[0], 'http://a/b/c/g?y/../x'],
            ['g#s/./x', bases[0], 'http://a/b/c/g#s/./x'],
            ['g#s/../x', bases[0], 'http://a/b/c/g#s/../x'],
            ['http:g', bases[0], ('http:g', 'http://a/b/c/g')],
            ['http:', bases[0], ('http:', bases[0])],
            // not sure where this one originated
            ['/a/b/c/./../../g', bases[0], 'http://a/a/g'],

            // http://gbiv.com/protocols/uri/test/rel_examples2.html
            // slashes in base URI's query args
            ['g', bases[1], 'http://a/b/c/g'],
            ['./g', bases[1], 'http://a/b/c/g'],
            ['g/', bases[1], 'http://a/b/c/g/'],
            ['/g', bases[1], 'http://a/g'],
            ['//g', bases[1], 'http://g/'],
            // changed in RFC 2396bis
            //('?y', bases[1], 'http://a/b/c/?y'],
            ['?y', bases[1], 'http://a/b/c/d;p?y'],
            ['g?y', bases[1], 'http://a/b/c/g?y'],
            ['g?y/./x', bases[1], 'http://a/b/c/g?y/./x'],
            ['g?y/../x', bases[1], 'http://a/b/c/g?y/../x'],
            ['g#s', bases[1], 'http://a/b/c/g#s'],
            ['g#s/./x', bases[1], 'http://a/b/c/g#s/./x'],
            ['g#s/../x', bases[1], 'http://a/b/c/g#s/../x'],
            ['./', bases[1], 'http://a/b/c/'],
            ['../', bases[1], 'http://a/b/'],
            ['../g', bases[1], 'http://a/b/g'],
            ['../../', bases[1], 'http://a/'],
            ['../../g', bases[1], 'http://a/g'],

            // http://gbiv.com/protocols/uri/test/rel_examples3.html
            // slashes in path params
            // all of these changed in RFC 2396bis
            ['g', bases[2], 'http://a/b/c/d;p=1/g'],
            ['./g', bases[2], 'http://a/b/c/d;p=1/g'],
            ['g/', bases[2], 'http://a/b/c/d;p=1/g/'],
            ['g?y', bases[2], 'http://a/b/c/d;p=1/g?y'],
            [';x', bases[2], 'http://a/b/c/d;p=1/;x'],
            ['g;x', bases[2], 'http://a/b/c/d;p=1/g;x'],
            ['g;x=1/./y', bases[2], 'http://a/b/c/d;p=1/g;x=1/y'],
            ['g;x=1/../y', bases[2], 'http://a/b/c/d;p=1/y'],
            ['./', bases[2], 'http://a/b/c/d;p=1/'],
            ['../', bases[2], 'http://a/b/c/'],
            ['../g', bases[2], 'http://a/b/c/g'],
            ['../../', bases[2], 'http://a/b/'],
            ['../../g', bases[2], 'http://a/b/g'],

            // http://gbiv.com/protocols/uri/test/rel_examples4.html
            // double and triple slash, unknown scheme
            ['g:h', bases[3], 'g:h'],
            ['g', bases[3], 'fred:///s//a/b/g'],
            ['./g', bases[3], 'fred:///s//a/b/g'],
            ['g/', bases[3], 'fred:///s//a/b/g/'],
            ['/g', bases[3], 'fred:///g'], // may change to fred:///s//a/g
            ['//g', bases[3], 'fred://g'], // may change to fred:///s//g
            ['//g/x', bases[3], 'fred://g/x'], // may change to fred:///s//g/x
            ['///g', bases[3], 'fred:///g'],
            ['./', bases[3], 'fred:///s//a/b/'],
            ['../', bases[3], 'fred:///s//a/'],
            ['../g', bases[3], 'fred:///s//a/g'],

            ['../../', bases[3], 'fred:///s//'],
            ['../../g', bases[3], 'fred:///s//g'],
            ['../../../g', bases[3], 'fred:///s/g'],
            // may change to fred:///s//a/../../../g
            ['../../../../g', bases[3], 'fred:///g'],

            // http://gbiv.com/protocols/uri/test/rel_examples5.html
            // double and triple slash, well-known scheme
            ['g:h', bases[4], 'g:h'],
            ['g', bases[4], 'http:///s//a/b/g'],
            ['./g', bases[4], 'http:///s//a/b/g'],
            ['g/', bases[4], 'http:///s//a/b/g/'],
            ['/g', bases[4], 'http:///g'], // may change to http:///s//a/g
            ['//g', bases[4], 'http://g/'], // may change to http:///s//g
            ['//g/x', bases[4], 'http://g/x'], // may change to http:///s//g/x
            ['///g', bases[4], 'http:///g'],
            ['./', bases[4], 'http:///s//a/b/'],
            ['../', bases[4], 'http:///s//a/'],
            ['../g', bases[4], 'http:///s//a/g'],
            ['../../', bases[4], 'http:///s//'],
            ['../../g', bases[4], 'http:///s//g'],
            // may change to http:///s//a/../../g
            ['../../../g', bases[4], 'http:///s/g'],
            // may change to http:///s//a/../../../g
            ['../../../../g', bases[4], 'http:///g'],

            // from Dan Connelly's tests in http://www.w3.org/2000/10/swap/uripath.py
            ['bar:abc', 'foo:xyz', 'bar:abc'],
            ['../abc', 'http://example/x/y/z', 'http://example/x/abc'],
            ['http://example/x/abc', 'http://example2/x/y/z', 'http://example/x/abc'],
            ['../r', 'http://ex/x/y/z', 'http://ex/x/r'],
            ['q/r', 'http://ex/x/y', 'http://ex/x/q/r'],
            ['q/r#s', 'http://ex/x/y', 'http://ex/x/q/r#s'],
            ['q/r#s/t', 'http://ex/x/y', 'http://ex/x/q/r#s/t'],
            ['ftp://ex/x/q/r', 'http://ex/x/y', 'ftp://ex/x/q/r'],
            ['', 'http://ex/x/y', 'http://ex/x/y'],
            ['', 'http://ex/x/y/', 'http://ex/x/y/'],
            ['', 'http://ex/x/y/pdq', 'http://ex/x/y/pdq'],
            ['z/', 'http://ex/x/y/', 'http://ex/x/y/z/'],
            ['#Animal',
                'file:/swap/test/animal.rdf',
                'file:/swap/test/animal.rdf#Animal'
            ],
            ['../abc', 'file:/e/x/y/z', 'file:/e/x/abc'],
            ['/example/x/abc', 'file:/example2/x/y/z', 'file:/example/x/abc'],
            ['../r', 'file:/ex/x/y/z', 'file:/ex/x/r'],
            ['/r', 'file:/ex/x/y/z', 'file:/r'],
            ['q/r', 'file:/ex/x/y', 'file:/ex/x/q/r'],
            ['q/r#s', 'file:/ex/x/y', 'file:/ex/x/q/r#s'],
            ['q/r#', 'file:/ex/x/y', 'file:/ex/x/q/r#'],
            ['q/r#s/t', 'file:/ex/x/y', 'file:/ex/x/q/r#s/t'],
            ['ftp://ex/x/q/r', 'file:/ex/x/y', 'ftp://ex/x/q/r'],
            ['', 'file:/ex/x/y', 'file:/ex/x/y'],
            ['', 'file:/ex/x/y/', 'file:/ex/x/y/'],
            ['', 'file:/ex/x/y/pdq', 'file:/ex/x/y/pdq'],
            ['z/', 'file:/ex/x/y/', 'file:/ex/x/y/z/'],
            ['file://meetings.example.com/cal#m1',
                'file:/devel/WWW/2000/10/swap/test/reluri-1.n3',
                'file://meetings.example.com/cal#m1'
            ],
            ['file://meetings.example.com/cal#m1',
                'file:/home/connolly/w3ccvs/WWW/2000/10/swap/test/reluri-1.n3',
                'file://meetings.example.com/cal#m1'
            ],
            ['./#blort', 'file:/some/dir/foo', 'file:/some/dir/#blort'],
            ['./#', 'file:/some/dir/foo', 'file:/some/dir/#'],
            // Ryan Lee
            ['./', 'http://example/x/abc.efg', 'http://example/x/'],


            // Graham Klyne's tests
            // http://www.ninebynine.org/Software/HaskellUtils/Network/UriTest.xls
            // 01-31 are from Connelly's cases

            // 32-49
            ['./q:r', 'http://ex/x/y', 'http://ex/x/q:r'],
            ['./p=q:r', 'http://ex/x/y', 'http://ex/x/p=q:r'],
            ['?pp/rr', 'http://ex/x/y?pp/qq', 'http://ex/x/y?pp/rr'],
            ['y/z', 'http://ex/x/y?pp/qq', 'http://ex/x/y/z'],
            ['local/qual@domain.org#frag',
                'mailto:local',
                'mailto:local/qual@domain.org#frag'
            ],
            ['more/qual2@domain2.org#frag',
                'mailto:local/qual1@domain1.org',
                'mailto:local/more/qual2@domain2.org#frag'
            ],
            ['y?q', 'http://ex/x/y?q', 'http://ex/x/y?q'],
            ['/x/y?q', 'http://ex?p', 'http://ex/x/y?q'],
            ['c/d', 'foo:a/b', 'foo:a/c/d'],
            ['/c/d', 'foo:a/b', 'foo:/c/d'],
            ['', 'foo:a/b?c#d', 'foo:a/b?c'],
            ['b/c', 'foo:a', 'foo:b/c'],
            ['../b/c', 'foo:/a/y/z', 'foo:/a/b/c'],
            ['./b/c', 'foo:a', 'foo:b/c'],
            ['/./b/c', 'foo:a', 'foo:/b/c'],
            ['../../d', 'foo://a//b/c', 'foo://a/d'],
            ['.', 'foo:a', 'foo:'],
            ['..', 'foo:a', 'foo:'],

            // 50-57[cf. TimBL comments --
            //  http://lists.w3.org/Archives/Public/uri/2003Feb/0028.html,
            //  http://lists.w3.org/Archives/Public/uri/2003Jan/0008.html)
            ['abc', 'http://example/x/y%2Fz', 'http://example/x/abc'],
            ['../../x%2Fabc', 'http://example/a/x/y/z', 'http://example/a/x%2Fabc'],
            ['../x%2Fabc', 'http://example/a/x/y%2Fz', 'http://example/a/x%2Fabc'],
            ['abc', 'http://example/x%2Fy/z', 'http://example/x%2Fy/abc'],
            ['q%3Ar', 'http://ex/x/y', 'http://ex/x/q%3Ar'],
            ['/x%2Fabc', 'http://example/x/y%2Fz', 'http://example/x%2Fabc'],
            ['/x%2Fabc', 'http://example/x/y/z', 'http://example/x%2Fabc'],
            ['/x%2Fabc', 'http://example/x/y%2Fz', 'http://example/x%2Fabc'],

            // 70-77
            ['local2@domain2', 'mailto:local1@domain1?query1', 'mailto:local2@domain2'],
            ['local2@domain2?query2',
                'mailto:local1@domain1',
                'mailto:local2@domain2?query2'
            ],
            ['local2@domain2?query2',
                'mailto:local1@domain1?query1',
                'mailto:local2@domain2?query2'
            ],
            ['?query2', 'mailto:local@domain?query1', 'mailto:local@domain?query2'],
            ['local@domain?query2', 'mailto:?query1', 'mailto:local@domain?query2'],
            ['?query2', 'mailto:local@domain?query1', 'mailto:local@domain?query2'],
            ['http://example/a/b?c/../d', 'foo:bar', 'http://example/a/b?c/../d'],
            ['http://example/a/b#c/../d', 'foo:bar', 'http://example/a/b#c/../d'],

            // 82-88
            // @isaacs Disagree. Not how browsers do it.
            // ['http:this', 'http://example.org/base/uri', 'http:this'],
            // @isaacs Added
            ['http:this', 'http://example.org/base/uri', 'http://example.org/base/this'],
            ['http:this', 'http:base', 'http:this'],
            ['.//g', 'f:/a', 'f://g'],
            ['b/c//d/e', 'f://example.org/base/a', 'f://example.org/base/b/c//d/e'],
            ['m2@example.ord/c2@example.org',
                'mid:m@example.ord/c@example.org',
                'mid:m@example.ord/m2@example.ord/c2@example.org'
            ],
            ['mini1.xml',
                'file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/',
                'file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/mini1.xml'
            ],
            ['../b/c', 'foo:a/y/z', 'foo:a/b/c'],

            //changeing auth
            ['http://diff:auth@www.example.com',
                'http://asdf:qwer@www.example.com',
                'http://diff:auth@www.example.com/'
            ]
        ];

        var formatTests = {
            'http://example.com?': {
                'href': 'http://example.com/?',
                'protocol': 'http:',
                'slashes': true,
                'host': 'example.com',
                'hostname': 'example.com',
                'search': '?',
                'query': {},
                'pathname': '/'
            },
            'http://example.com?foo=bar#frag': {
                'href': 'http://example.com/?foo=bar#frag',
                'protocol': 'http:',
                'host': 'example.com',
                'hostname': 'example.com',
                'hash': '#frag',
                'search': '?foo=bar',
                'query': 'foo=bar',
                'pathname': '/'
            },
            'http://example.com?foo=@bar#frag': {
                'href': 'http://example.com/?foo=@bar#frag',
                'protocol': 'http:',
                'host': 'example.com',
                'hostname': 'example.com',
                'hash': '#frag',
                'search': '?foo=@bar',
                'query': 'foo=@bar',
                'pathname': '/'
            },
            'http://example.com?foo=/bar/#frag': {
                'href': 'http://example.com/?foo=/bar/#frag',
                'protocol': 'http:',
                'host': 'example.com',
                'hostname': 'example.com',
                'hash': '#frag',
                'search': '?foo=/bar/',
                'query': 'foo=/bar/',
                'pathname': '/'
            },
            'http://example.com?foo=?bar/#frag': {
                'href': 'http://example.com/?foo=?bar/#frag',
                'protocol': 'http:',
                'host': 'example.com',
                'hostname': 'example.com',
                'hash': '#frag',
                'search': '?foo=?bar/',
                'query': 'foo=?bar/',
                'pathname': '/'
            },
            'http://example.com#frag=?bar/#frag': {
                'href': 'http://example.com/#frag=?bar/#frag',
                'protocol': 'http:',
                'host': 'example.com',
                'hostname': 'example.com',
                'hash': '#frag=?bar/#frag',
                'pathname': '/'
            },
            'http://google.com" onload="alert(42)/': {
                'href': 'http://google.com/%22%20onload=%22alert(42)/',
                'protocol': 'http:',
                'host': 'google.com',
                'pathname': '/%22%20onload=%22alert(42)/'
            },
            'http://a.com/a/b/c?s#h': {
                'href': 'http://a.com/a/b/c?s#h',
                'protocol': 'http',
                'host': 'a.com',
                'pathname': 'a/b/c',
                'hash': 'h',
                'search': 's'
            },
            'xmpp:isaacschlueter@jabber.org': {
                'href': 'xmpp:isaacschlueter@jabber.org',
                'protocol': 'xmpp:',
                'host': 'jabber.org',
                'auth': 'isaacschlueter',
                'hostname': 'jabber.org'
            },
            'http://atpass:foo%40bar@127.0.0.1/': {
                'href': 'http://atpass:foo%40bar@127.0.0.1/',
                'auth': 'atpass:foo@bar',
                'hostname': '127.0.0.1',
                'protocol': 'http:',
                'pathname': '/'
            },
            'http://atslash%2F%40:%2F%40@foo/': {
                'href': 'http://atslash%2F%40:%2F%40@foo/',
                'auth': 'atslash/@:/@',
                'hostname': 'foo',
                'protocol': 'http:',
                'pathname': '/'
            },
            'svn+ssh://foo/bar': {
                'href': 'svn+ssh://foo/bar',
                'hostname': 'foo',
                'protocol': 'svn+ssh:',
                'pathname': '/bar',
                'slashes': true
            },
            'dash-test://foo/bar': {
                'href': 'dash-test://foo/bar',
                'hostname': 'foo',
                'protocol': 'dash-test:',
                'pathname': '/bar',
                'slashes': true
            },
            'dash-test:foo/bar': {
                'href': 'dash-test:foo/bar',
                'hostname': 'foo',
                'protocol': 'dash-test:',
                'pathname': '/bar'
            },
            'dot.test://foo/bar': {
                'href': 'dot.test://foo/bar',
                'hostname': 'foo',
                'protocol': 'dot.test:',
                'pathname': '/bar',
                'slashes': true
            },
            'dot.test:foo/bar': {
                'href': 'dot.test:foo/bar',
                'hostname': 'foo',
                'protocol': 'dot.test:',
                'pathname': '/bar'
            },
            // ipv6 support
            'coap:u:p@[::1]:61616/.well-known/r?n=Temperature': {
                'href': 'coap:u:p@[::1]:61616/.well-known/r?n=Temperature',
                'protocol': 'coap:',
                'auth': 'u:p',
                'hostname': '::1',
                'port': '61616',
                'pathname': '/.well-known/r',
                'search': 'n=Temperature'
            },
            'coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton': {
                'href': 'coap:[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616/s/stopButton',
                'protocol': 'coap',
                'host': '[fedc:ba98:7654:3210:fedc:ba98:7654:3210]:61616',
                'pathname': '/s/stopButton'
            },

            // encode context-specific delimiters in path and query, but do not touch
            // other non-delimiter chars like `%`.
            // <https://github.com/joyent/node/issues/4082>

            // `#`,`?` in path
            '/path/to/%%23%3F+=&.txt?foo=theA1#bar': {
                href: '/path/to/%%23%3F+=&.txt?foo=theA1#bar',
                pathname: '/path/to/%#?+=&.txt',
                query: {
                    foo: 'theA1'
                },
                hash: "#bar"
            },

            // `#`,`?` in path + `#` in query
            '/path/to/%%23%3F+=&.txt?foo=the%231#bar': {
                href: '/path/to/%%23%3F+=&.txt?foo=the%231#bar',
                pathname: '/path/to/%#?+=&.txt',
                query: {
                    foo: 'the#1'
                },
                hash: "#bar"
            },

            // `?` and `#` in path and search
            'http://ex.com/foo%3F100%m%23r?abc=the%231?&foo=bar#frag': {
                href: 'http://ex.com/foo%3F100%m%23r?abc=the%231?&foo=bar#frag',
                protocol: 'http:',
                hostname: 'ex.com',
                hash: '#frag',
                search: '?abc=the#1?&foo=bar',
                pathname: '/foo?100%m#r',
            },

            // `?` and `#` in search only
            'http://ex.com/fooA100%mBr?abc=the%231?&foo=bar#frag': {
                href: 'http://ex.com/fooA100%mBr?abc=the%231?&foo=bar#frag',
                protocol: 'http:',
                hostname: 'ex.com',
                hash: '#frag',
                search: '?abc=the#1?&foo=bar',
                pathname: '/fooA100%mBr',
            }
        };

        it('should parse', function() {
            // URLs to parse, and expected data
            // { url : parsed }
            for (var u in parseTests) {
                var actual = shims.url.parse(u),
                    spaced = shims.url.parse('     \t  ' + u + '\n\t');
                expected = parseTests[u];

                Object.keys(actual).forEach(function(i) {
                    if (expected[i] === undefined && actual[i] === null) {
                        expected[i] = null;
                    }
                });

                assert.deepEqual(actual, expected);
                assert.deepEqual(spaced, expected);

                var expected = parseTests[u].href,
                    actual = shims.url.format(parseTests[u]);

                assert.equal(actual, expected, 'format(' + u + ') == ' + u + '\nactual:' + actual);
            }
        });

        it('should parse with query string', function() {
            for (var u in parseTestsWithQueryString) {
                var actual = shims.url.parse(u, true);
                var expected = parseTestsWithQueryString[u];
                for (var i in actual) {
                    if (actual[i] === null && expected[i] === undefined) {
                        expected[i] = null;
                    }
                }
                assert.deepEqual(actual, expected);
            }
        });

        it('should format with wonky url', function() {
            // some extra formatting tests, just to verify
            // that it'll format slightly wonky content to a valid url.

            for (var u in formatTests) {
                var expect = formatTests[u].href;
                delete formatTests[u].href;
                var actual = shims.url.format(u);
                var actualObj = shims.url.format(formatTests[u]);
                assert.equal(actual, expect,
                    'wonky format(' + u + ') == ' + expect +
                    '\nactual:' + actual);
                assert.equal(actualObj, expect,
                    'wonky format(' + JSON.stringify(formatTests[u]) +
                    ') == ' + expect +
                    '\nactual: ' + actualObj);
            }


        });

        it('should parse relative urls', function() {

            /*
 [from, path, expected]
*/

            relativeTests.forEach(function(relativeTest) {
                var a = shims.url.resolve(relativeTest[0], relativeTest[1]),
                    e = relativeTest[2];
                assert.equal(a, e,
                    'resolve(' + [relativeTest[0], relativeTest[1]] + ') == ' + e +
                    '\n  actual=' + a);
            });


        });

        it('should throws', function() {

            // https://github.com/joyent/node/issues/568
            [
                undefined,
                null,
                true,
                false,
                0.0,
                0, [], {}
            ].forEach(function(val) {
                assert.throws(function() {
                    shims.url.parse(val);
                }, TypeError);
            });


        });

        it('should parse more relative url', function() {

            //
            // Tests below taken from Chiron
            // http://code.google.com/p/chironjs/source/browse/trunk/src/test/http/url.js
            //
            // Copyright (c) 2002-2008 Kris Kowal <http://cixar.com/~kris.kowal>
            // used with permission under MIT License
            //
            // Changes marked with @isaacs


            relativeTests2.forEach(function(relativeTest) {
                var a = shims.url.resolve(relativeTest[1], relativeTest[0]),
                    e = relativeTest[2];
                assert.equal(a, e,
                    'resolve(' + [relativeTest[1], relativeTest[0]] + ') == ' + e +
                    '\n  actual=' + a);
            });

            //if format and parse are inverse operations then
            //resolveObject(parse(x), y) == parse(resolve(x, y))

            // //host and hostname are special, in this case a '' value is important
            // var emptyIsImportant = {
            //     'host': true,
            //     'hostname': ''
            // };

            //format: [from, path, expected]
            relativeTests.forEach(function(relativeTest) {
                var actual = shims.url.resolveObject(shims.url.parse(relativeTest[0]), relativeTest[1]),
                    expected = shims.url.parse(relativeTest[2]);


                assert.deepEqual(actual, expected);

                expected = relativeTest[2];
                actual = shims.url.format(actual);

                assert.equal(actual, expected,
                    'format(' + actual + ') == ' + expected + '\nactual:' + actual);
            });

            //format: [to, from, result]
            // the test: ['.//g', 'f:/a', 'f://g'] is a fundamental problem
            // url.parse('f:/a') does not have a host
            // url.resolve('f:/a', './/g') does not have a host because you have moved
            // down to the g directory.  i.e. f:     //g, however when this url is parsed
            // f:// will indicate that the host is g which is not the case.
            // it is unclear to me how to keep this information from being lost
            // it may be that a pathname of ////g should collapse to /g but this seems
            // to be a lot of work for an edge case.  Right now I remove the test
            if (relativeTests2[181][0] === './/g' &&
                relativeTests2[181][1] === 'f:/a' &&
                relativeTests2[181][2] === 'f://g') {
                relativeTests2.splice(181, 1);
            }
            relativeTests2.forEach(function(relativeTest) {
                var actual = shims.url.resolveObject(shims.url.parse(relativeTest[1]), relativeTest[0]),
                    expected = shims.url.parse(relativeTest[2]);

                assert.deepEqual(actual, expected);

                var expected = relativeTest[2],
                    actual = shims.url.format(actual);

                assert.equal(actual, expected,
                    'format(' + relativeTest[1] + ') == ' + expected +
                    '\nactual:' + actual);
            });

        });
    });
});